good to see u 

#include<stdio.h>
#define INFINITY 9999
#define MAX 10
void dijkstra(int G[MAX][MAX],int n,int startnode);
int main()
{
int G[MAX][MAX],i,j,n,u;
printf("enter no of nodes:");
scanf("%d",&n);
printf("enter adjacency matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&G[i][j]);
printf("enter root node:");
scanf("%d",&u);
dijkstra(G,n,u);
return 0;
}
void dijkstra(int G[MAX][MAX],int n,int startnode)
{
int cost[MAX][MAX],dis[MAX],pred[MAX];
int visited[MAX],count,mindis,nextnode,i,j;
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
for(i=1;i<=n;i++)
{
dis[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
}
dis[startnode]=0;
visited[startnode]=1;
count=1;
while(count<n-1)
{
mindis=INFINITY;
for(i=1;i<=n;i++)
if(dis[i]<mindis&&!visited[i])
{
mindis=dis[i];
nextnode=i;
}
visited[nextnode]=1;
for(i=1;i<=n;i++)
if(!visited[i])
if(mindis+cost[nextnode][i]<dis[i])
{
dis[i]=mindis+cost[nextnode][i];
pred[i]=nextnode;
}
count++;
}
for(i=1;i<=n;i++)
if(i!=startnode)
{
printf("\nDistance of node %d = %d",i,dis[i]);
printf("\nPath = %d",i);
j=i;
do
{
j=pred[j];
printf("<-%d",j);
}
while(j!=startnode);
}
}
